<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Mapping;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @var bool
     */
    private $isAdmin = false;

    /**
     * @param $user
     * @return array|null
     */
    public function findAllByUserPrivileges($user)
    {
        $userId = $user->getId();
        $clearanceLevel = $this->getClearanceLevel($user);
        $em = $this->getEntityManager();
        $request = $em->getRepository('AppBundle:File');
        $qb = $request->createQueryBuilder('F');
        if ($this->isAdmin) {
            $query = $qb
                ->select('F.title, F.description, F.size, F.time, F.type, F.filename, F.lectureFile, C.name')
                ->join('AppBundle:Course', 'C', 'WITH', 'F.course = C')
                ->getQuery();
        } else {
            $query = $qb
                ->select('F.title, F.description, F.size, F.time, F.type, F.filename, F.lectureFile, C.name')
                ->join('AppBundle:Privilege', 'P', 'WITH', 'P.file = F')
                ->join('AppBundle:Course', 'C', 'WITH', 'F.course = C')
                ->where('P.user = :userId')
                ->andWhere('P.clearanceLevel <= :clearanceLevel')
                ->setParameter('clearanceLevel', $clearanceLevel)
                ->setParameter('userId', $userId)
                ->getQuery();
        }
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $exception) {
            return null;
        }
    }

    public function findAllByUser($user)
    {
        $userId = $user->getId();
        $clearanceLevel = $this->getClearanceLevel($user);
        $em = $this->getEntityManager();
        $request = $em->getRepository('AppBundle:File');
        $qb = $request->createQueryBuilder('F');
        if ($this->isAdmin) {
            $query = $qb
                ->select('F.id, F.title, F.description, F.size, F.time, F.type, F.filename, F.lectureFile, C.name')
                ->join('AppBundle:Course', 'C', 'WITH', 'F.course = C')
                ->getQuery();
        } else {
            $query = $qb
                ->select('F.id, F.title, F.description, F.size, F.time, F.type, F.filename, F.lectureFile, C.name')
                ->join('AppBundle:Course', 'C', 'WITH', 'F.course = C')
                ->where('F.userId = :userId')
                ->setParameter('userId', $userId)
                ->getQuery();
        }
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $exception) {
            return null;
        }
    }


    /**
     * @param $course
     * @param $user
     * @return array|null
     */
    public function findAllByCourse($course, $user)
    {
        $userId = $user->getId();
        $clearanceLevel = $this->getClearanceLevel($user);
        $em = $this->getEntityManager();
        $request = $em->getRepository('AppBundle:File');
        $qb = $request->createQueryBuilder('F');
        if ($this->isAdmin) {
            $query = $qb
                ->select('F.title, F.description, F.size, F.time, F.type, F.filename, F.lectureFile, C.name')
                ->join('AppBundle:Course', 'C', 'WITH', 'F.course = C')
                ->where('C.name = :course')
                ->setParameter('course', $course)
                ->getQuery();
        } else {
            $query = $qb
                ->select('F.title, F.description, F.size, F.time, F.type, F.filename, F.lectureFile, C.name')
                ->join('AppBundle:Privilege', 'P', 'WITH', 'P.file = F')
                ->join('AppBundle:Course', 'C', 'WITH', 'F.course = C')
                ->where('P.user = :userId')
                ->andWhere('P.clearanceLevel <= :clearanceLevel')
                ->andWhere('C.name = :course')
                ->setParameter('clearanceLevel', $clearanceLevel)
                ->setParameter('userId', $userId)
                ->setParameter('course', $course)
                ->getQuery();
        }
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $exception) {
            return null;
        }
    }

    /**
     * @param $user
     * @return int
     */
    public function getClearanceLevel($user)
    {
        if (in_array('ROLE_LECTURER', $user->getRoles())) {
            return 1;
        } else if (in_array('ROLE_ADMIN', $user->getRoles())) {
            $this->isAdmin = true;
            return 1;
        } else
            return 0;
    }
}
