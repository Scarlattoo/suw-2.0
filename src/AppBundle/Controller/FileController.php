<?php

namespace AppBundle\Controller;

use AppBundle\Entity\File;
use AppBundle\Entity\Privilege;
use AppBundle\Form\FilesType;
use Proxies\__CG__\AppBundle\Entity\User;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * File controller.
 *
 * @Route("/zarzadzanie_wykladami")
 */
class FileController extends Controller
{
    /**
     * Lists all file entities.
     *
     * @Route("/", name="file_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $user = $this->getUser();
        $em = $this->getDoctrine()->getManager();
        $files = $em->getRepository(File::class)->findAllByUser($user);
        return $this->render('file/index.html.twig', array(
            'files' => $files,
        ));
    }

    /**
     * Creates a new file entity.
     *
     * @Route("/udostępnij", name="file_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $user=$this->getUser();
        $file = new File();
        $form = $this->createForm(FilesType::class, $file,array('validation_groups' => array('default', 'newFile')));
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $lectureFile = $file->getLectureFile();
            if (!$file->getType()) {
                $file->setType($lectureFile->guessExtension());
            }
            if (!$file->getTitle()) {
                $title=\explode('.',$lectureFile->getClientOriginalName());
                $file->setTitle($title[0]);
            }
            $fileName = $this->generateUniqueFileName().'.'.$lectureFile->guessExtension();
            // Move the file to the directory where brochures are stored
            try {
                $lectureFile->move(
                    $this->getParameter('lectures_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                $this->addFlash('warning','Błąd podczas wysyłania pliku.');
                return $this->redirectToRoute('file_new');
            }
            if (!$file->getFilename()) {
                $file->setFilename($lectureFile->getClientOriginalName());
            }
            $file->setUserId($user);
            $file->setSize(ceil($lectureFile->getClientSize()/1000));
            $file->setLectureFile($fileName);
            $now= new \DateTime('now');
            $file->setTime($now);
            $em = $this->getDoctrine()->getManager();
            $em->persist($file);
            $em->flush();
            $this->addFlash('success', 'Plik dodany pomyślnie');
            return $this->redirectToRoute('file_show', array('id' => $file->getId()));
        }

        return $this->render('file/new.html.twig', array(
            'file' => $file,
            'form' => $form->createView(),
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a file entity.
     *
     * @Route("/{id}", name="file_show")
     * @Method("GET")
     */
    public function showAction(File $file)
    {
        return $this->render('file/show.html.twig', array(
            'file' => $file,
            'delete_link' => null,
        ));
    }

    /**
     * Displays a form to edit an existing file entity.
     *
     * @Route("/{id}/edytuj", name="file_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, File $file)
    {
        $deleteForm = $this->createDeleteForm($file);
        $editForm = $this->createForm(FilesType::class, $file,array('validation_groups' => array('default')));
        $oldFileName = $file->getLectureFile();
        $editForm->handleRequest($request);
        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $lectureFile = $file->getLectureFile();
            if ($lectureFile instanceof UploadedFile) {
                if (empty($oldFileName)) {
                    $fileName = $this->generateUniqueFileName().'.'.$lectureFile->guessExtension();
                } else
                {
                    $fileName=$oldFileName;
                }
                try {
                    $lectureFile->move(
                        $this->getParameter('lectures_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                    $this->addFlash('warning','Błąd podczas edytowania pliku.');
                    return $this->redirectToRoute('file_edit');
                }
            }
            $file->setLectureFile($oldFileName);
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('file_edit', array('id' => $file->getId()));
        }

        return $this->render('file/edit.html.twig', array(
            'file' => $file,
            'edit_form' => $editForm->createView(),
        ));
    }

    /**
     * Deletes a file entity.
     *
     * @Route("/usun_plik/{id}", name="file_delete")
     * @Method("GET")
     */
    public function deleteAction($id)
    {
        $file = $this->getDoctrine()->getRepository('AppBundle:File')->find($id);
            try {
                $fileName=$this->getParameter('lectures_directory').DIRECTORY_SEPARATOR.$file->getLectureFile();
                if (file_exists($fileName)) {
                    unlink($fileName);
                }
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                $this->addFlash('warning','Błąd podczas usuwania pliku.');
                return $this->redirectToRoute('file_edit');
            }
            $em = $this->getDoctrine()->getManager();
            $em->remove($file);
            $em->flush();
        $this->addFlash('success','Plik usunięty pomyślnie.');
        return $this->redirectToRoute('file_index');
    }

    /**
     * Creates a form to delete a file entity.
     *
     * @param File $file The file entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(File $file)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('file_delete', array('id' => $file->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }

    /**
     * Creates a new privilege entity.
     *
     * @Route("/nadaj_uprawnienia/{fileId}", name="file_privilege")
     * @Method({"GET", "POST"})
     */
    public function listAction(Request $request, $fileId)
    {
        $privilege = new Privilege();
        $file = $this->getDoctrine()->getRepository('AppBundle:File')->find($fileId);
        $privilege->setFile($file);
        $privilege->setClearanceLevel(false);
        $privileges = $this->getDoctrine()->getRepository('AppBundle:Privilege')->findByFile($fileId);
//        $privileges = $this->get('doctrine.orm.entity_manager')
//            ->createQuery('SELECT U.transcriptId
//            FROM AppBundle:Privilege P
//            JOIN AppBundle:User U
//            WITH P.user = U
//            AND P.file = :file')
//            ->setParameter('file', $file)
//            ->getResult();
//        $users = $this->get('doctrine.orm.entity_manager')->createQuery('SELECT u.transcriptId FROM AppBundle:User u')->getResult();
//        $choice = \array_diff($privileges,$users); //WTF
        $form = $this->createForm('AppBundle\Form\PrivilegeType', $privilege,array('choices' => null));
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($privilege);
            $em->flush();
            return $this->redirectToRoute('file_privilege', array('fileId' => $fileId));
        }

        return $this->render('privilege/new.html.twig', array(
            'file' => $file,
            'privileges' => $privileges,
            'form' => $form->createView(),
        ));
    }

    /**
     * Deletes a privilege entity.
     *
     * @Route("/usun_uprawnienie/{privilegeId}", name="privilege_delete")
     * @Method("GET")
     */
    public function deletePrivilegeAction($privilegeId)
    {
        $em = $this->getDoctrine()->getManager();
        $privilege = $this->getDoctrine()->getRepository('AppBundle:Privilege')->find($privilegeId);
        $fileId = $privilege->getFile()->getId();
        $em->remove($privilege);
        $em->flush();
        return $this->redirectToRoute('file_privilege',array('fileId' => $fileId));
    }

}
