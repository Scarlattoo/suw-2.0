<?php

namespace AppBundle\Controller;

use AppBundle\Entity\File;
use AppBundle\Form\FilesType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * File controller.
 *
 * @Route("/zarzadzanie_wykladami")
 */
class FileController extends Controller
{
    /**
     * Lists all file entities.
     *
     * @Route("/", name="file_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $user = $this->getUser();
        $em = $this->getDoctrine()->getManager();
        $files = $em->getRepository(File::class)->findByUserId($user->getId());
        return $this->render('file/index.html.twig', array(
            'files' => $files,
        ));
    }

    /**
     * Creates a new file entity.
     *
     * @Route("/new", name="file_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $user=$this->getUser();
        $courses=$user->getCourses()->getValues();
//        foreach ($coursesRepo as $course) {
//            $courses[$course->getName()]=$course->getId();
//        }
        $file = new File();
        $form = $this->createForm(FilesType::class, $file,array('validation_groups' => array('default','newFile')));
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $lectureFile = $file->getLectureFile();
            $fileName = $this->generateUniqueFileName().'.'.$lectureFile->guessExtension();
            // Move the file to the directory where brochures are stored
            try {
                $lectureFile->move(
                    $this->getParameter('lectures_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                $this->addFlash('warning','Błąd podczas wysyłania pliku.');
                return $this->redirectToRoute('file_new');
            }
            if (!$file->getFilename()) {
                $file->setFilename($lectureFile->getClientOriginalName());
            }
            $file->setUserId($user);
            $file->setSize($lectureFile->getClientSize()/1000);
            $file->setLectureFile($fileName);
            $now= new \DateTime('now');
            $file->setTime($now);
            $em = $this->getDoctrine()->getManager();
            $em->persist($file);
            $em->flush();
            $this->addFlash('success', 'Plik dodany pomyślnie');
            return $this->redirectToRoute('file_show', array('id' => $file->getId()));
        }

        return $this->render('file/new.html.twig', array(
            'file' => $file,
            'form' => $form->createView(),
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a file entity.
     *
     * @Route("/{id}", name="file_show")
     * @Method("GET")
     */
    public function showAction(File $file)
    {
        return $this->render('file/show.html.twig', array(
            'file' => $file,
            'delete_link' => null,
        ));
    }

    /**
     * Displays a form to edit an existing file entity.
     *
     * @Route("/{id}/edit", name="file_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, File $file)
    {
        $deleteForm = $this->createDeleteForm($file);
        $editForm = $this->createForm(FilesType::class, $file,array('validation_groups' => array('default')));
        $oldFileName = $file->getLectureFile();
        $editForm->handleRequest($request);
        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $lectureFile = $file->getLectureFile();
            if ($lectureFile instanceof UploadedFile) {
                if (empty($oldFileName)) {
                    $fileName = $this->generateUniqueFileName().'.'.$lectureFile->guessExtension();
                } else
                {
                    $fileName=$oldFileName;
                }
                try {
                    $lectureFile->move(
                        $this->getParameter('lectures_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                    $this->addFlash('warning','Błąd podczas edytowania pliku.');
                    return $this->redirectToRoute('file_edit');
                }
            }
            $file->setLectureFile($oldFileName);
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('file_edit', array('id' => $file->getId()));
        }

        return $this->render('file/edit.html.twig', array(
            'file' => $file,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a file entity.
     *
     * @Route("/{id}", name="file_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, File $file)
    {
        $form = $this->createDeleteForm($file);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                $fileName=$this->getParameter('lectures_directory').DIRECTORY_SEPARATOR.$file->getLectureFile();
                if (file_exists($fileName)) {
                    unlink($fileName);
                }
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                $this->addFlash('warning','Błąd podczas usuwania pliku.');
                return $this->redirectToRoute('file_edit');
            }
            $em = $this->getDoctrine()->getManager();
            $em->remove($file);
            $em->flush();
        }

        return $this->redirectToRoute('file_index');
    }
//    /**
//     * Deletes a file entity.
//     *
//     * @Route("/{id}/confirmDelete", name="file_deleteConfirmation")
//     * @Method("DELETE")
//     */
//    public function confirmDeleteAction(Request $request, File $file)
//    {
//
//        return $this->redirectToRoute('file_index');
//    }

    /**
     * Creates a form to delete a file entity.
     *
     * @param File $file The file entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(File $file)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('file_delete', array('id' => $file->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
